---
- name: Setup Backend Application with AWS RDS & ElastiCache Discovery
  hosts: localhost
  become: yes
  vars:
    backend_container_name: "user-app-backend"
    backend_image: "santoshpalla27/user-app:backend-rds-ec-v1"
    backend_port: 5000
    node_env: "development"

    # DB defaults
    rds_master_username: "admin"
    rds_master_password: "password"
    rds_database: "userdb"
    rds_port: 3306

    # Redis defaults
    redis_password: "password"
    redis_port: 6379

  tasks:
    - name: Install required packages
      yum:
        name:
          - docker
          - python3-pip
          - python3-setuptools
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Ensure boto3 & docker python libs installed
      pip:
        name:
          - boto3
          - botocore
          - docker
        executable: pip3
        extra_args: --user --break-system-packages

    - name: Add ec2-user to Docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    # --- Fetch AWS RDS endpoint ---
    - name: Get RDS instances
      amazon.aws.rds_instance_info:
        region: us-east-1
        filters:
          db-instance-id: "database-1"   # adjust to your RDS identifier
      register: rds_info

    - name: Set RDS endpoint fact
      set_fact:
        rds_endpoint: "{{ rds_info.instances[0].endpoint.address }}"
      when: rds_info.instances | length > 0

    # --- Fetch AWS Redis cluster endpoint ---
    - name: Get Redis clusters
      amazon.aws.elasticache_info:
        region: us-east-1
      register: redis_info

    - name: Set Redis cluster endpoint fact
      set_fact:
        redis_cluster_endpoint: "{{ redis_info.clusters[0].configuration_endpoint.address }}"
      when: redis_info.clusters | length > 0

    - name: Fail if endpoints not found
      fail:
        msg: "RDS or Redis endpoint not found!"
      when: rds_endpoint is not defined or redis_cluster_endpoint is not defined

    - name: Stop existing backend container
      docker_container:
        name: "{{ backend_container_name }}"
        state: absent
      ignore_errors: yes

    - name: Pull backend image
      docker_image:
        name: "{{ backend_image }}"
        source: pull
        state: present

    - name: Run backend container with AWS endpoints
      docker_container:
        name: "{{ backend_container_name }}"
        image: "{{ backend_image }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ backend_port }}:{{ backend_port }}"
        env:
          NODE_ENV: "{{ node_env }}"
          PORT: "{{ backend_port | string }}"

          # AWS RDS MySQL Configuration
          RDS_ENDPOINT: "{{ rds_endpoint }}"
          RDS_MASTER_USERNAME: "{{ rds_master_username }}"
          RDS_MASTER_PASSWORD: "{{ rds_master_password }}"
          RDS_DATABASE: "{{ rds_database }}"
          RDS_PORT: "{{ rds_port | string }}"
          RDS_SSL: "true"

          # AWS Redis Configuration
          REDIS_CLUSTER_ENDPOINT: "{{ redis_cluster_endpoint }}"
          REDIS_PORT: "{{ redis_port | string }}"
          REDIS_USE_TLS: "true"
          REDIS_PASSWORD: "{{ redis_password }}"

    - name: Wait for backend container to be healthy
      wait_for:
        host: localhost
        port: "{{ backend_port }}"
        delay: 10
        timeout: 60

    - name: Show backend container info
      docker_container_info:
        name: "{{ backend_container_name }}"
      register: backend_status

    - name: Debug final status
      debug:
        msg: |
          âœ… Backend is running!
          Container: {{ backend_status.container.Id }}
          RDS Endpoint: {{ rds_endpoint }}
          Redis Cluster Endpoint: {{ redis_cluster_endpoint }}
          Access API: http://localhost:{{ backend_port }}/api/health

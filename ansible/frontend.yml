---
- name: Install Docker and Deploy Frontend Container
  hosts: localhost
  connection: local
  become: yes
  vars:
    container_name: "user-app-frontend"
    container_port: 3000
    image_name: "santoshpalla27/user-app:frontend-v1"
    api_url: "http://backend.santosh.website"

  tasks:
    - name: Verify running on Amazon Linux
      fail:
        msg: "This playbook is designed for Amazon Linux only. Current OS: {{ ansible_distribution }}"
      when: ansible_distribution != "Amazon"

    - name: Update system packages (Amazon Linux)
      yum:
        name: "*"
        state: latest

    - name: Install Docker
      yum:
        name: docker
        state: present

    - name: Try installing Docker Python library via yum first
      yum:
        name: python3-docker
        state: present
      ignore_errors: yes
      register: yum_docker_install

    - name: Install Docker Python library via pip (fallback)
      pip:
        name: docker
        executable: pip3
        extra_args: --user --break-system-packages
      become: no
      when: yum_docker_install is failed

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes

    - name: Reset connection to pick up new group membership
      meta: reset_connection

    - name: Stop existing frontend container if running
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: yes

    - name: Pull the frontend image
      docker_image:
        name: "{{ image_name }}"
        source: pull
        state: present

    - name: Run frontend container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ container_port }}:{{ container_port }}"
        env:
          REACT_APP_API_URL: "{{ api_url }}"

    - name: Wait for container to start
      wait_for:
        host: localhost
        port: "{{ container_port }}"
        delay: 10
        timeout: 60

    - name: Verify container is running
      docker_container_info:
        name: "{{ container_name }}"
      register: container_info

    - name: Display container status
      debug:
        msg: |
          Container Status: {{ container_info.container.State.Status }}
          Container ID: {{ container_info.container.Id }}
          Port Mapping: {{ container_info.container.NetworkSettings.Ports }}
          Image: {{ container_info.container.Config.Image }}

    - name: Display access information
      debug:
        msg: |
          Frontend application is now running!
          Access it at: http://localhost:{{ container_port }}
          Container name: {{ container_name }}
          API URL configured: {{ api_url }}